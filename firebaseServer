import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;

public class ManageDB {
   
   private ArrayList<ParkingLotName> CarList = new ArrayList<ParkingLotName>();
   private HashMap<String,String> PNameList = new HashMap<String, String>();
   
   public ManageDB()
   {
      initDB();
      initMap();
      activeManage();
   }
   
   public void activeManage()
   {
      try{
           ServerSocket serverSocket = new ServerSocket(9000);
           System.out.println("I'm waiting here: " + serverSocket.getLocalPort());            
                               
           Socket socket = serverSocket.accept();
           System.out.println("from " + 
               socket.getInetAddress() + ":" + socket.getPort());
           
           String path = "C:\\Users\\gksdn\\Documents\\AduinoData\\"; // 위치
           File temp = new File(path);
          File[] fileList = temp.listFiles();
          
          String FinText = "";
          
          OutputStream outputStream = socket.getOutputStream();
            PrintStream printStream = new PrintStream(outputStream);
            
           
          while(true)
          {
             fileList = temp.listFiles();
             if(fileList.length <= 0) // 파일목록이 생길때까지 반복
             {
                try
                {
                   Thread.sleep(500);
                }
                catch(InterruptedException e)
                {
                   e.printStackTrace();
                }
                continue;
             }
             
             try
             {
                Thread.sleep(500);
             }
             catch(InterruptedException e)
             {
                e.printStackTrace();
             }
             
             System.out.println(fileList[0]);
             for(int i = 0 ; i<fileList.length ; i++) // 1회만 반복되게 설정 , 나중에 파일목록수만큼 반복하도록 바꿔야함
             {
                String Text = "";
                File file = new File(fileList[i].getPath());
                FileReader file_reader = new FileReader(file);
                  int cur = 0;
                  while((cur = file_reader.read()) != -1){
                     Text += (char)cur;
                  } // Text 반복
                  
                  System.out.println(Text.length());
                  
                 
                  
                 if(Text.length() != 9 && Text.length() != 26)
                 {
                    file_reader.close();
                     
                     fileList[i].delete();
                    continue;
                 }
                  
                  String[] code = Text.split(","); // 코드 분리
                  
                  System.out.println(code[0] + " : " + code[1]);
                  
                  
                 
                 if(code[1].equals("45")) // 입장
                 {
                    int k = 0;
                    if(CarList.size() == 0) // 아무것도 없는 경우
                    {
                       CarList.add(new ParkingLotName(deCodeName(code[0])));
                       CarList.get(0).List.add(new CarCountArray(code[2], code[3]));
                       System.out.println("number : " + CarList.get(k).List.get(0).CarNumber + " , entTime : " +  CarList.get(k).List.get(0).entTime);
                       
                    }
                    else
                    {
                       for(k = 0 ; k<CarList.size() ; k++)
                       {
                          if(deCodeName(code[0]).equals(CarList.get(k).ParKingLotName))
                          {
                             CarList.get(k).List.add(new CarCountArray(code[2], code[3]));
                             for(int jj = 0 ; jj < CarList.get(k).List.size() ; jj++) // 주차장 이름이 일치하는경우 하부배열에 추가
                             {
                                System.out.println("number : " + CarList.get(k).List.get(jj).CarNumber + " , entTime : " +  CarList.get(k).List.get(jj).entTime);
                             }
                             
                             break;
                          }
                          
                       }
                       if(CarList.size() == k) // 순회가 끝나고 아무것도 찾지 못한경우
                       {
                          CarList.add(new ParkingLotName(deCodeName(code[0])));
                          CarList.get(k).List.add(new CarCountArray(code[2], code[3]));
                          System.out.println("number : " + CarList.get(k).List.get(0).CarNumber + " , entTime : " +  CarList.get(k).List.get(0).entTime);
                       }
                    }
                    
                 
                    
         
                    
                    
                 }
                 else if(code[1].equals("66")) // 퇴장
                 {
                    int k;
                    for(k = 0 ; k<CarList.size() ; k++)
                    {
                       if(deCodeName(code[0]).equals(CarList.get(k).ParKingLotName))
                       {
                          break;
                       }
                       
                    }
                    
                    int j = 0;
                    
                    while(true)
                    {
                       if(CarList.get(k).List.get(j).CarNumber.equals(code[2]))
                       {
                          int hour , min , sec;
                          String[] Time = CarList.get(k).List.get(j).entTime.split(":"); // 입장
                          String[] OTime = code[3].split(":"); // 퇴장시간
                          
                          hour = Integer.parseInt(Time[0]); // 시분초
                          min = Integer.parseInt(Time[1]);
                          sec = Integer.parseInt(Time[2]);
                          
                          hour = Integer.parseInt(OTime[0]) - hour;
                          min = Integer.parseInt(OTime[1]) - min;
                          if(min<0)
                          {
                             hour -=1;
                             min +=60;
                          }
                          sec = Integer.parseInt(OTime[2]) - sec;
                          if(sec <0)
                          {
                             min -=1;
                             if(min<0)
                              {
                                 hour -=1;
                                 min +=60;
                              }
                             sec += 60;
                          }
                          
                          String result = "" + hour + ":" + min + ":" + sec;
                          
                          result = deCodeName(code[0]) + "," + "평균시간," + result + ",";
                          FinText = result;
                          
                          printStream.print(FinText);
                          System.out.println("number : " + CarList.get(k).List.get(j).CarNumber + " , outTime : " + code[3]);
                          break;
                          
                       }
                       j++;
                    }
                    // 메세지 설정
                 }
                 else if(code[1].equals("32")) // 자리변경
                 {
                    
                    FinText = deCodeName(code[0]);
                    FinText += ",자리변경,";
                    
                    printStream.print(FinText);
                    
                 }
                 else
                 {
                    file_reader.close();
                     
                     fileList[i].delete();
                    continue;
                 }

                  System.out.println(FinText);
                  
                  file_reader.close();
                  
                  fileList[i].delete();
             }
             printStream.close();
               
               if(temp.equals("종료")) break;
          }
          
          //socket.close();
           
       }catch(IOException e){
           System.out.println(e.toString());
       }
   }
   
   public void initDB()
   {
      
      
   }
   public void initMap()
   {
      PNameList.put("101", "호서주차장");
      PNameList.put("201", "배방주차장");
      PNameList.put("301", "아산주차장");
      PNameList.put("401", "SJ테크노빌");
      PNameList.put("501", "sk트윈타워");
      PNameList.put("601", "가산디지털환승");
      PNameList.put("701", "법원노상주차장");
      PNameList.put("801", "세일철강");
      PNameList.put("901", "중심상가주차장");
      PNameList.put("102", "협동봉제");
   }
   
   public String deCodeName(String code)
   {
      String temp;
      temp = PNameList.get("101");
      return temp;
   }

   

}
